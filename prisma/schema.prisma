generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Image {
  id       String    @id @default(cuid())
  userId   String?
  cocktail Cocktail?

  @@index([userId])
}

model Cocktail {
  id                  String       @id @default(cuid())
  name                String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  imageId             String       @unique
  userId              String?
  isCocktailOfTheWeek Boolean      @default(false)
  iceId               String
  ingredients         Ingredient[]
  garnishes           Garnish[]
  ice                 Ice          @relation(fields: [iceId], references: [id])
  image               Image?       @relation(fields: [imageId], references: [id])

  @@index([iceId])
  @@index([userId])
}

model Ingredient {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  amount    Float
  unitId    String
  cocktails Cocktail[]
  unit      Unit       @relation(fields: [unitId], references: [id])

  @@index([unitId])
}

model Unit {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ingredient Ingredient[]
  garnish    Garnish[]
}

model Garnish {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  amount    Float
  unitId    String
  cocktails Cocktail[]
  unit      Unit       @relation(fields: [unitId], references: [id])

  @@index([unitId])
}

model Ice {
  id        String     @id @default(cuid())
  type      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cocktail  Cocktail[]
}

model CocktailToGarnish {
  A String
  B String

  @@unique([A, B], map: "_CocktailToGarnish_AB_unique")
  @@index([B], map: "_CocktailToGarnish_B_index")
  @@map("_CocktailToGarnish")
}

model CocktailToIngredient {
  A String
  B String

  @@unique([A, B], map: "_CocktailToIngredient_AB_unique")
  @@index([B], map: "_CocktailToIngredient_B_index")
  @@map("_CocktailToIngredient")
}
