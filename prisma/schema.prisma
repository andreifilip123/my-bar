generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Cocktail {
    id          String       @id @default(cuid())
    name        String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    ingredients Ingredient[]
    garnishes   Garnish[]
    ice         Ice[]
}

model Ingredient {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cocktails Cocktail[]
    amount    Int
    unit      Unit       @relation(fields: [unitId], references: [id])
    unitId    String
}

model Unit {
    id         String       @id @default(cuid())
    name       String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    unit       String
    ingredient Ingredient[]
}

model Garnish {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cocktails Cocktail[]
    amount    Int
    unit      String
}

model Ice {
    id         String    @id @default(cuid())
    type       String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    cocktail   Cocktail? @relation(fields: [cocktailId], references: [id])
    cocktailId String?
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
